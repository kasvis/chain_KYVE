syntax = "proto3";

package kyve.registry.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "kyve/registry/v1beta1/params.proto";
import "kyve/registry/v1beta1/registry.proto";

option go_package = "github.com/KYVENetwork/chain/x/registry/types";

// Query defines the gRPC registry querier service.
service Query {
  // PARAMS

  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/params";
  }

  // POOL

  // Pool queries a pool by ID.
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/pool/{id}";
  }

  // Pools queries for all pools.
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/pools";
  }

  // FundingAmount ...
  rpc FundingAmount(QueryFundingAmountRequest) returns (QueryFundingAmountResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/funding_amount/{id}/{funder}";
  }

  // StakingAmount ...
  rpc StakingAmount(QueryStakingAmountRequest) returns (QueryStakingAmountResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/staking_amount/{id}/{staker}";
  }

  // FundersList ...
  rpc FundersList(QueryFundersListRequest) returns (QueryFundersListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/funders_list/{id}";
  }

  // StakersList ...
  rpc StakersList(QueryStakersListRequest) returns (QueryStakersListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/stakers_list/{id}";
  }

  // WARP

  // Proposal ...
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/proposal/{bundle_id}";
  }

  // Proposals ...
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/proposals/{pool_id}";
  }

  // ProposalByHeight ...
  rpc ProposalByHeight(QueryProposalByHeightRequest) returns (QueryProposalByHeightResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/proposal_by_height/{pool_id}/{height}";
  }

  // PROTOCOL NODE - FLOW

  // CanPropose ...
  rpc CanPropose(QueryCanProposeRequest) returns (QueryCanProposeResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/can_propose/{pool_id}/{proposer}";
  }

  // CanVote checks if voter on pool can still vote for the given bundle
  rpc CanVote(QueryCanVoteRequest) returns (QueryCanVoteResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/can_vote/{pool_id}/{voter}/{bundle_id}";
  }

  // StakeInfo returns necessary information to become a staker (used by the protocol nodes)
  rpc StakeInfo(QueryStakeInfoRequest) returns (QueryStakeInfoResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/stake_info/{pool_id}/{staker}";
  }

  // STATS FOR USER ACCOUNT

  // AccountAssets ...
  rpc AccountAssets(QueryAccountAssetsRequest) returns (QueryAccountAssetsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_assets/{address}";
  }

  // AccountFundedList ...
  rpc AccountFundedList(QueryAccountFundedListRequest) returns (QueryAccountFundedListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_funded_list/{address}";
  }

  // AccountStakedList ...
  rpc AccountStakedList(QueryAccountStakedListRequest) returns (QueryAccountStakedListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_staked_list/{address}";
  }

  // AccountDelegationList ...
  rpc AccountDelegationList(QueryAccountDelegationListRequest) returns (QueryAccountDelegationListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_delegation_list/{address}";
  }

  // AccountUnbondings ...
  rpc AccountUnbondings(QueryAccountUnbondingsRequest) returns (QueryAccountUnbondingsResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/account_unbondings/{address}";
  }

  // DELEGATION

  // Delegator ...
  rpc Delegator(QueryDelegatorRequest) returns (QueryDelegatorResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/delegator/{delegator}/{staker}/{pool_id}";
  }

  // AccountStakersDelegationList ...
  rpc AccountStakersDelegationList(QueryAccountStakersDelegationListRequest) returns (QueryAccountStakersDelegationListResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/delegators_by_pool_and_staker/{pool_id}/{staker}";
  }

  // StakersByPoolAndDelegator ...
  rpc StakersByPoolAndDelegator(QueryStakersByPoolAndDelegatorRequest) returns (QueryStakersByPoolAndDelegatorResponse) {
    option (google.api.http).get = "/kyve/registry/v1beta1/stakers_by_pool_and_delegator/{pool_id}/{delegator}";
  }
}

// PARAMS

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  kyve.registry.v1beta1.Params params = 1 [(gogoproto.nullable) = false];
}

// POOL

// QueryPoolRequest is the request type for the Query/Pool RPC method.
message QueryPoolRequest {
  // id defines the unique ID of the pool.
  uint64 id = 1;
}

// QueryPoolResponse is the response type for the Query/Pool RPC method.
message QueryPoolResponse {
  // pool ...
  kyve.registry.v1beta1.Pool pool = 1 [(gogoproto.nullable) = false];
}

// QueryPoolsRequest is the request type for the Query/Pools RPC method.
message QueryPoolsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // search ...
  string search = 2;
  // runtime ...
  string runtime = 3;
  // paused ...
  bool paused = 4;
}

// QueryPoolsResponse is the response type for the Query/Pools RPC method.
message QueryPoolsResponse {
  // pools ...
  repeated kyve.registry.v1beta1.Pool pools = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFundingAmountRequest is the request type for the Query/FundingAmount RPC method.
message QueryFundingAmountRequest {
  // id defines the unique ID of the pool.
  uint64 id = 1;
  // funder ...
  string funder = 2;
}

// QueryFundingAmountResponse is the response type for the Query/FundingAmount RPC method.
message QueryFundingAmountResponse {
  // amount ...
  uint64 amount = 1;
}

// QueryStakingAmountRequest is the request type for the Query/StakingAmount RPC method.
message QueryStakingAmountRequest {
  // id defines the unique ID of the pool.
  uint64 id = 1;
  // staker ...
  string staker = 2;
}

// QueryStakingAmountResponse is the response type for the Query/StakingAmount RPC method.
message QueryStakingAmountResponse {
  // amount ...
  uint64 amount = 1;
}

// QueryFundersListRequest is the request type for the Query/FundersList RPC method.
message QueryFundersListRequest {
  // id defines the unique ID of the pool.
  uint64 id = 1;
}

// QueryFundersListResponse is the response type for the Query/FundersList RPC method.
message QueryFundersListResponse {
  // funders ...
  repeated kyve.registry.v1beta1.Funder funders = 1;
}

// QueryStakersListRequest is the request type for the Query/StakersList RPC method.
message QueryStakersListRequest {
  // id defines the unique ID of the pool.
  uint64 id = 1;
}

// QueryStakersListResponse is the response type for the Query/StakersList RPC method.
message QueryStakersListResponse {
  // stakers ...
  repeated kyve.registry.v1beta1.StakerResponse stakers = 1;
}

// StakerResponse ...
message StakerResponse {
  // staker ...
  string staker = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // account ...
  string account = 3;
  // amount ...
  uint64 amount = 4;
  // unbonding_amount ...
  uint64 unbonding_amount = 5;
  // total_delegation ...
  uint64 total_delegation = 6;
  // commission ...
  string commission = 7;
  // moniker ...
  string moniker = 8;
  // website ...
  string website = 9;
  // logo
  string logo = 10;
}

// WARP

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
message QueryProposalRequest {
  // bundle_id ...
  string bundle_id = 1;
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  // proposal ...
  kyve.registry.v1beta1.Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC method.
message QueryProposalsResponse {
  // proposals ...
  repeated kyve.registry.v1beta1.Proposal proposals = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryProposalByHeightRequest is the request type for the Query/ProposalByHeight RPC method.
message QueryProposalByHeightRequest {
  // pool_id ...
  uint64 pool_id = 1;
  // height ...
  uint64 height = 2;
}

// QueryProposalResponse is the response type for the Query/ProposalByHeight RPC method.
message QueryProposalByHeightResponse {
  // proposal ...
  kyve.registry.v1beta1.Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// PROTOCOL NODE - FLOW

// QueryCanProposeRequest is the request type for the Query/CanPropose RPC method.
message QueryCanProposeRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // proposer ...
  string proposer = 2;
}

// QueryCanProposeResponse is the response type for the Query/CanPropose RPC method.
message QueryCanProposeResponse {
  // possible ...
  bool possible = 1;
  // reason ...
  string reason = 2;
}

// QueryCanVoteRequest is the request type for the Query/CanVote RPC method.
message QueryCanVoteRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // voter ...
  string voter = 2;
  // bundle_id ...
  string bundle_id = 3;
}

// QueryCanVoteResponse is the response type for the Query/CanVote RPC method.
message QueryCanVoteResponse {
  // possible ...
  bool possible = 1;
  // reason ...
  string reason = 2;
}

// QueryStakeInfoRequest is the request type for the Query/StakeInfo RPC method.
message QueryStakeInfoRequest {
  // pool_id ...
  uint64 pool_id = 1;
  // staker ..
  string staker = 2;
}

// QueryStakeInfoResponse is the response type for the Query/StakeInfo RPC method.
message QueryStakeInfoResponse {
  // balance ...
  string balance = 1;
  // current_stake ...
  string current_stake = 2;
  // minimum_stake ...
  string minimum_stake = 3;
  // current_unbonding ...
  string current_unbonding = 4;
}

// STATS FOR USER ACCOUNT

// QueryAccountAssetsRequest is the request type for the Query/AccountAssets RPC method.
message QueryAccountAssetsRequest {
  // address ...
  string address = 1;
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
message QueryAccountAssetsResponse {
  // balance ...
  uint64 balance = 1;
  // protocol_staking ...
  uint64 protocol_staking = 2;
  // protocol_delegation ...
  uint64 protocol_delegation = 3;
  // protocol_staking_unbonding ...
  uint64 protocol_staking_unbonding = 4;
  // protocol_staking_unbonding ...
  uint64 protocol_delegation_unbonding = 5;
  // protocol_rewards ...
  uint64 protocol_rewards = 6;
  // protocol_funding ...
  uint64 protocol_funding = 7;
}

// QueryAccountFundedListRequest is the request type for the Query/AccountFundedList RPC method.
message QueryAccountFundedListRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // address ...
  string address = 2;
}

// QueryAccountFundedListResponse is the response type for the Query/AccountFundedList RPC method.
message QueryAccountFundedListResponse {
  // funded ...
  repeated kyve.registry.v1beta1.Funded funded = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Funded ...
message Funded {
  // fund_id ...
  string fund_id = 1;
  // account ...
  string account = 2;
  // amount ...
  uint64 amount = 3;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 4;
}

// QueryAccountStakedListRequest is the request type for the Query/AccountStakedList RPC method.
message QueryAccountStakedListRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // address ...
  string address = 2;
}

// QueryAccountStakedListResponse is the response type for the Query/StakedList RPC method.
message QueryAccountStakedListResponse {
  // staked ...
  repeated Staked staked = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Staked ...
message Staked {
  // staker ...
  string staker = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // account ...
  string account = 3;
  // amount ...
  uint64 amount = 4;
  // unbonding_amount
  uint64 unbonding_amount = 5;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 6;
}

// QueryAccountDelegationListRequest is the request type for the Query/AccountDelegationList RPC method.
message QueryAccountDelegationListRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // address ...
  string address = 2;
}

// QueryAccountDelegationListRequest is the response type for the Query/AccountDelegationList RPC method.
message QueryAccountDelegationListResponse {
  // delegations ...
  repeated kyve.registry.v1beta1.DelegatorResponse delegations = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// DelegatorResponse ...
message DelegatorResponse {
  // account ...
  string account = 1;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 2;
  // current_reward ...
  uint64 current_reward = 3;
  // delegation_amount ...
  uint64 delegation_amount = 4;
  // staker ...
  string staker = 5;
  // delegation_pool_data ...
  kyve.registry.v1beta1.DelegationPoolData delegation_pool_data = 6;
}

// DELEGATION

// QueryDelegatorRequest is the request type for the Query/Delegator RPC method.
message QueryDelegatorRequest {
  // delegator ...
  string delegator = 1;
  // staker ...
  string staker = 2;
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 3;
}

// QueryDelegatorResponse is the response type for the Query/Delegator RPC method.
message QueryDelegatorResponse {
  // delegator ...
  kyve.registry.v1beta1.Delegator delegator = 1 [(gogoproto.nullable) = false];
}

// QueryAccountStakersDelegationListRequest is the request type for the Query/AccountStakersDelegationList RPC method.
message QueryAccountStakersDelegationListRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // staker ...
  string staker = 3;
}

// QueryAccountStakersDelegationListResponse is the response type for the Query/AccountStakersDelegationList RPC method.
message QueryAccountStakersDelegationListResponse {
  // delegators ...
  repeated kyve.registry.v1beta1.StakerDelegatorResponse delegators = 1 [(gogoproto.nullable) = false];
  // pool ...
  kyve.registry.v1beta1.Pool pool = 2;
  // delegation_pool_data ...
  kyve.registry.v1beta1.DelegationPoolData delegation_pool_data = 3;
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 4;
}

// StakerDelegatorResponse ...
message StakerDelegatorResponse {
  // delegator ...
  string delegator = 1;
  // current_reward ...
  uint64 current_reward = 2;
  // delegation_amount ...
  uint64 delegation_amount = 3;
  // staker ...
  string staker = 4;
}

// QueryStakersByPoolAndDelegatorRequest  is the request type for the Query/StakersByPoolAndDelegator RPC method.
message QueryStakersByPoolAndDelegatorRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // delegator ...
  string delegator = 3;
}

// QueryStakersByPoolAndDelegatorResponse  is the response type for the Query/StakersByPoolAndDelegator RPC method.
message QueryStakersByPoolAndDelegatorResponse {
  // delegator ...
  string delegator = 1;
  // pool ...
  kyve.registry.v1beta1.Pool pool = 2;
  // stakers ...
  repeated kyve.registry.v1beta1.DelegationForStakerResponse stakers = 3 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 4;
}

// DelegationForStakerResponse ...
message DelegationForStakerResponse {
  // staker ...
  string staker = 1;
  // current_reward ...
  uint64 current_reward = 2;
  // delegation_amount ...
  uint64 delegation_amount = 3;
  // total_delegation_amount ...
  uint64 total_delegation_amount = 4;
  // delegator_count ...
  uint64 delegator_count = 5;
}

// QueryUnbondingEntriesByDelegatorRequest ...
message QueryAccountUnbondingsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // delegator ...
  string address = 2;
}

// QueryUnbondingEntriesByDelegatorResponse ...
message QueryAccountUnbondingsResponse {
  // unbonding_entries ...
  repeated kyve.registry.v1beta1.UnbondingEntries unbonding_entries = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
